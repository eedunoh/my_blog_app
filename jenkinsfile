pipeline {
    agent any

    parameters {
        booleanParam(name: 'PLAN_TERRAFORM', defaultValue: false, description: 'Check to plan Terraform changes')
        booleanParam(name: 'APPLY_TERRAFORM', defaultValue: false, description: 'Check to apply Terraform changes')
        booleanParam(name: 'DESTROY_TERRAFORM', defaultValue: false, description: 'Check to destroy Terraform infrastructure')
    }

    environment {
        IMAGE_NAME = 'jackedu/blog_app_repo'
        IMAGE_TAG = 'latest'
    }

    stages {

        stage('Clone Repository') {
            steps {
                echo 'Cleaning and cloning repository...'
                deleteDir()
                git branch: 'main', url: 'https://github.com/eedunoh/my_blog_app.git'
                sh 'ls -lart'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                dir('app_folder') {
                    script {
                        dockerImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                    }
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    echo "üöÄ Pushing Docker image to Docker Hub..."
                    docker.withRegistry('https://index.docker.io/v1/', 'my_docker_hub_secrets') {
                        dockerImage.push("${IMAGE_TAG}")
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                echo "‚öôÔ∏è Initializing Terraform..."
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'my_aws_credentials']]) {
                    dir('terraform_folder') {
                        sh 'echo "================= Terraform Init =================="'
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.PLAN_TERRAFORM }
            }
            steps {
                echo "üîç Running Terraform Plan..."
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'my_aws_credentials']]) {
                    dir('terraform_folder') {
                        sh 'echo "================= Terraform Plan =================="'
                        // Generate binary plan
                        sh 'terraform plan -out=tfplan.binary'
                        // Generate human-readable plan text
                        sh 'terraform show -no-color tfplan.binary > tfplan.txt'
                    }
                    // Archive the readable tfplan.txt in Jenkins for review
                    archiveArtifacts artifacts: 'terraform_folder/tfplan.txt', onlyIfSuccessful: true
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.APPLY_TERRAFORM }
            }
            steps {
                echo "üöÄ Applying Terraform Plan from tfplan.binary..."
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'my_aws_credentials']]) {
                    dir('terraform_folder') {
                        sh 'echo "================= Terraform Apply =================="'
                        // Apply the exact plan that was created in the Plan stage
                        sh 'terraform apply -auto-approve tfplan.binary'
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.DESTROY_TERRAFORM }
            }
            steps {
                echo "üí£ Destroying Terraform Infrastructure..."
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'my_aws_credentials']]) {
                    dir('terraform_folder') {
                        sh 'echo "================= Terraform Destroy =================="'
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }

    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
        always {
            echo 'üîî Pipeline finished running.'
        }
    }
}
